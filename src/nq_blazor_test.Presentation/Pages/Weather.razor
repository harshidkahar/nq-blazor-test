@page "/weather"
@using nq_blazor_test.Application.Interfaces
@using nq_blazor_test.Domain.Entities
@inject IWeatherService WeatherService

<h3>Weather Forecasts</h3>

<RoleSelector RoleChanged="OnRoleSelected" />
@if (!string.IsNullOrWhiteSpace(CurrentRole) || CurrentRole=="")
{
    <p><strong>Current Role:</strong> @(string.IsNullOrWhiteSpace(CurrentRole) ? "General User" : CurrentRole)</p>
}

@if (_errorMessage is not null)
{
    <div class="alert alert-danger">@_errorMessage</div>
}
else if (_weatherList is null)
{
    <p><em>Loading...</em></p>
}
else if (!GetVisibleConditions().Any())
{
    <p><em>No weather data available for the selected role.</em></p>
}

else
{
    <table class="table table-bordered table-striped">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temperature (°C)</th>
                <th>Summary</th>
                <th>Location</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var w in GetVisibleConditions())
            {
                <tr class="@GetRowClass(w.Summary)">
                    <td>@w.Date.ToShortDateString()</td>
                    <td>@w.TemperatureC</td>
                    <td>@w.Summary</td>
                    <td>
                        @if (!ShouldShowAcknowledge(w) && IsCritical(w.Summary))
                        {
                            <span class="badge bg-warning text-dark ms-2">⚠ Warning</span>
                        }
                        @w.Location

                        @if (ShouldShowAcknowledge(w) && !IsAcknowledged(w))
                        {
                            <button class="btn btn-sm btn-outline-primary ms-2"
                                    @onclick="() => Acknowledge(w)">
                                Acknowledge
                            </button>
                        }

                        @if (IsAcknowledged(w))
                        {
                            <span class="text-success ms-2">✔ Acknowledged</span>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private string? CurrentRole = "";
    private List<WeatherCondition>? _weatherList;
    private string? _errorMessage;
    private HashSet<string> AcknowledgedKeys = new();

    protected override async Task OnInitializedAsync()
    {
        var result = await WeatherService.GetWeatherAsync();
        if (result.IsError)
        {
            _errorMessage = string.Join(", ", result.Errors.Select(e => e.Description));
        }
        else
        {
            _weatherList = result.Value;
        }
    }

    private void OnRoleSelected(string? role)
    {
        CurrentRole = role;
    }

    private void Acknowledge(WeatherCondition weather)
    {
        var key = GetKey(weather);
        if (!AcknowledgedKeys.Contains(key))
        {
            AcknowledgedKeys.Add(key);
        }
    }


    private bool IsAcknowledged(WeatherCondition weather) =>
        AcknowledgedKeys.Contains(GetKey(weather));

    private string GetKey(WeatherCondition w) =>
        $"{w.Date.Date}-{w.Summary}-{w.Location}";

    private bool ShouldShowAcknowledge(WeatherCondition w)
    {
        if (CurrentRole == "Firefighter" && w.Summary == "Scorching") return true;
        if (CurrentRole == "Snow Groomer" && (w.Summary == "Freezing" || w.Summary == "Bracing")) return true;
        return false;
    }

    private string GetRowClass(string summary)
    {
        return summary switch
        {
            "Freezing" or "Scorching" => "table-danger",
            "Bracing" or "Sweltering" => "table-warning",
            _ => ""
        };
    }

    private IEnumerable<WeatherCondition> GetVisibleConditions()
    {
        if (_weatherList is null) return Enumerable.Empty<WeatherCondition>();

        return CurrentRole switch
        {
            "Firefighter" => _weatherList.Where(w => w.Summary == "Scorching"),
            "Snow Groomer" => _weatherList.Where(w => w.Summary is "Freezing" or "Bracing"),
            _ => _weatherList
        };
    }


    private static bool IsCritical(string summary) =>
    summary is "Scorching" or "Freezing" or "Bracing" or "Sweltering";

}
